// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users the are respnsible for creating and managing events
model User {
  id                 String                  @id @unique
  email              String                  @unique
  username           String                  @unique
  firstName          String
  lastName           String
  middleName         String?
  createdTimestamp   DateTime                @default(now())
  updatedTimestamp   DateTime                @default(now()) @updatedAt
  playerAssociations UserPlayerAssociation[]
  entitledEvents     UserEventEntitlement[]

  eventPlayerInvitations EventPlayerInvitation[]
}

// Entitles a user to an event with a specific role
model UserEventEntitlement {
  user              User                     @relation(fields: [userId], references: [id])
  userId            String
  event             Event                    @relation(fields: [eventId], references: [id])
  eventId           String
  role              UserEventEntitlementRole
  assignedTimestamp DateTime                 @default(now())
  assignedBy        String

  @@id([userId, eventId])
}

// Associates a user with a player. Players are managed by users and are not shared between users unless the appropriate entitlement exists.
model UserPlayerAssociation {
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  player           Player   @relation(fields: [playerId], references: [id])
  playerId         String
  createdTimestamp DateTime @default(now())

  @@id([userId, playerId])
}

// Roles that a user can have in relation to an event
enum UserEventEntitlementRole {
  OWNER
  EDITOR
  VIEWER
}

// Events are held by users, events hold players (via playerGroups) and all other elements associated with event planning and event game play.
model Event {
  id                     String                  @id @unique
  name                   String
  description            String?
  proposedDatetime       DateTime?
  location               String?
  createdTimestamp       DateTime                @default(now())
  updatedTimestamp       DateTime                @default(now()) @updatedAt
  playedTimestamp        DateTime?
  imagePath              String?
  entitledUsers          UserEventEntitlement[]
  eventPlayerGroup       EventPlayerGroup        @relation(fields: [eventPlayerGroupId], references: [id])
  eventPlayerGroupId     String                  @unique
  eventPlayerInvitations EventPlayerInvitation[]
}

// Players are the participants in events. Players are managed by users and are not shared between users unless the appropriate entitlement exists.
model Player {
  id                String                  @id @unique
  firstName         String
  middleName        String?
  lastName          String
  email             String                  @unique
  phoneNumber       String
  age               Int?
  createdTimestamp  DateTime                @default(now())
  updatedTimestamp  DateTime                @default(now()) @updatedAt
  userAssociations  UserPlayerAssociation[]
  eventInvitations  EventPlayerInvitation[]
  eventPlayerGroups EventPlayerGroup[]
}

// Associates a player with an event.
model EventPlayerGroup {
  id      String   @id @unique
  event   Event?
  players Player[]
}

// Invitations to players to join an event
model EventPlayerInvitation {
  event              Event                               @relation(fields: [eventId], references: [id])
  eventId            String
  player             Player                              @relation(fields: [playerId], references: [id])
  playerId           String
  invitedTimestamp   DateTime                            @default(now())
  invitedBy          User                                @relation(fields: [userId], references: [id])
  respondedTimestamp DateTime?
  responseStatus     EventPlayerInvitationResponseStatus @default(PENDING)
  responseMessage    String?
  userId             String

  @@id([eventId, playerId])
}

// The status of a player's response to an event invitation
enum EventPlayerInvitationResponseStatus {
  ACCEPTED
  DECLINED
  PENDING
}
