// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users the are responsible for creating and managing events
model User {
  id                     String                  @id @unique
  email                  String                  @unique
  username               String                  @unique
  firstName              String
  lastName               String
  middleName             String?
  createdTimestamp       DateTime                @default(now())
  updatedTimestamp       DateTime                @default(now()) @updatedAt
  playerAssociations     UserPlayerAssociation[]
  entitledEvents         UserEventEntitlement[]
  eventPlayerInvitations EventPlayerInvitation[]
  ownedPlayer            Player                  @relation(fields: [ownedPlayerId], references: [id])
  ownedPlayerId          String                  @unique
}

// Entitles a user to an event with a specific role
model UserEventEntitlement {
  user              User                     @relation(fields: [userId], references: [id])
  userId            String
  event             Event                    @relation(fields: [eventId], references: [id])
  eventId           String
  role              UserEventEntitlementRole
  assignedTimestamp DateTime                 @default(now())
  assignedBy        String

  @@id([userId, eventId])
}

// Associates a user with a player. Players are managed by users and are not shared between users unless the appropriate entitlement exists.
model UserPlayerAssociation {
  user             User     @relation(fields: [userEmail], references: [email])
  userEmail        String
  player           Player   @relation(fields: [playerEmail], references: [email])
  playerEmail      String
  createdTimestamp DateTime @default(now())

  @@id([userEmail, playerEmail])
}

// Roles that a user can have in relation to an event
enum UserEventEntitlementRole {
  OWNER
  EDITOR
  VIEWER
}

// Events are held by users, events hold players (via playerGroups) and all other elements associated with event planning and event game play.
model Event {
  id                        String                           @id @unique
  name                      String
  description               String?
  proposedDatetime          DateTime?
  location                  String?
  createdTimestamp          DateTime                         @default(now())
  updatedTimestamp          DateTime                         @default(now()) @updatedAt
  playedTimestamp           DateTime?
  imagePath                 String?
  entitledUsers             UserEventEntitlement[]
  eventPlayerGroup          EventPlayerGroup                 @relation(fields: [eventPlayerGroupId], references: [id])
  eventPlayerGroupId        String                           @unique
  eventPlayerInvitations    EventPlayerInvitation[]
  playerParticipationStatus EventPlayerParticipationStatus[]
  eventGameCategories       EventGameCategory[]
  rounds                    Round[]
}

// Players are the participants in events. Players are managed by users and are not shared between users unless the appropriate entitlement exists.
// We should manage players differently depending on weather or not a users owns a player.
// an owned player is a player that is managed by a user account that has signed up for the platform.
// An unOwned player is one that is created by a user on behalf of the player. For example, where the event owner signs a user up for the platform.
// We need to decide on player ownership. This WILL be different depending on how the player is created and if that player is owned by a user.
// Scenarios
/// 1. A user, as and EventOwner, creates a player and they are part of the event.
/// 2. A user, as a an accountHolder has a player created for them that may or may not be part of the event.
// If we have a player per event, then we need to potentially associate them with a central user account. This will result in duplicate data because we will have player per person, per event.
// If we have a player which is managed by a user (who is not the owner of the player) then we can have a player object that exist in the context of a non-owning user and shared across events.
// If we create a player account for a user when they sign up for the platform, then they would need to accept invitation in order for their player info to be shared with an event owner.
model Player {
  id                       String                           @id @unique
  firstName                String
  middleName               String?
  lastName                 String
  email                    String                           @unique
  phoneNumber              String
  createdTimestamp         DateTime                         @default(now())
  updatedTimestamp         DateTime                         @default(now()) @updatedAt
  userAssociations         UserPlayerAssociation[]
  eventInvitations         EventPlayerInvitation[]
  eventPlayerGroups        EventPlayerGroup[]
  eventParticipationStatus EventPlayerParticipationStatus[]
  matches                  MatchPlayer[]
  score                    Score[]
  ownedByUser              User?
}

// Associates a player with an event.
model EventPlayerGroup {
  id               String   @id @unique
  createdTimestamp DateTime @default(now())
  event            Event?
  players          Player[]
}

// Invitations to players to join an event
model EventPlayerInvitation {
  event              Event                               @relation(fields: [eventId], references: [id])
  eventId            String
  player             Player                              @relation(fields: [playerId], references: [id])
  playerId           String
  createdTimestamp   DateTime                            @default(now())
  invitedBy          User                                @relation(fields: [userId], references: [id])
  respondedTimestamp DateTime?
  responseStatus     EventPlayerInvitationResponseStatus @default(PENDING)
  responseMessage    String?
  userId             String

  @@id([eventId, playerId])
}

// The status of a player's response to an event invitation
enum EventPlayerInvitationResponseStatus {
  ACCEPTED
  DECLINED
  PENDING
}

// A model to track the participation status of a player during an event
model EventPlayerParticipationStatus {
  event                     Event     @relation(fields: [eventId], references: [id])
  eventId                   String
  player                    Player    @relation(fields: [playerId], references: [id])
  playerId                  String
  createdTimestamp          DateTime  @default(now())
  updatedTimestamp          DateTime  @default(now()) @updatedAt
  initialCheckedInTimestamp DateTime?
  isCheckedIn               Boolean   @default(false)
  isPlaying                 Boolean   @default(false)

  @@id([eventId, playerId])
}

// Categories of games that can be played during an event
model EventGameCategory {
  id               String      @id @unique
  createdTimestamp DateTime    @default(now())
  updatedTimestamp DateTime    @default(now()) @updatedAt
  name             String      @unique
  description      String?
  isInPlay         Boolean     @default(true)
  event            Event?      @relation(fields: [eventId], references: [id])
  eventId          String?
  eventGames       EventGame[]
}

// Games that can be played during an event
model EventGame {
  id                  String             @id @unique
  createdTimestamp    DateTime           @default(now())
  updatedTimestamp    DateTime           @default(now()) @updatedAt
  name                String             @unique
  description         String?
  lowScoreWins        Boolean            @default(false)
  isInPlay            Boolean            @default(true)
  eventGameCategory   EventGameCategory? @relation(fields: [eventGameCategoryId], references: [id])
  eventGameCategoryId String?
  matches             Match[]
}

// Round
model Round {
  id                 String     @id @unique
  createdTimestamp   DateTime   @default(now())
  startedTimestamp   DateTime?
  completedTimestamp DateTime?
  event              Event      @relation(fields: [eventId], references: [id])
  eventId            String
  phase              RoundPhase

  Match Match[]
}

enum RoundPhase {
  SETUP
  READY
  PLAYING
  COMPLETE
}

// Match
model Match {
  id                 String        @id @unique
  createdTimestamp   DateTime      @default(now())
  startedTimestamp   DateTime?
  completedTimestamp DateTime?
  round              Round         @relation(fields: [roundId], references: [id])
  roundId            String
  game               EventGame     @relation(fields: [gameId], references: [id])
  gameId             String
  players            MatchPlayer[]

  score Score[]
}

model MatchPlayer {
  id               String   @id @unique
  createdTimestamp DateTime @default(now())
  match            Match    @relation(fields: [matchId], references: [id])
  matchId          String
  player           Player   @relation(fields: [playerId], references: [id])
  playerId         String
}

model Score {
  recordedTimestamp DateTime   @default(now())
  match             Match      @relation(fields: [matchId], references: [id])
  matchId           String
  player            Player     @relation(fields: [playerId], references: [id])
  playerId          String
  score             Int
  isWinningScore    Boolean
  medal             ScoreMedal

  @@id([matchId, playerId])
}

enum ScoreMedal {
  GOLD
  SILVER
  BRONZE
  NONE
}
