type Query {
  createEvent(input: CreateEventInput!): Event
  readEvent(input: ReadEventInput!): Event
  listEvents: [Event]
  getMessage: Message
}

type Mutation {
  createEvent(input: CreateEventInput!): Event
  updateEvent(input: UpdateEventInput!): Event
  deleteEvent(input: DeleteEventInput!): EventDeleteResult
}

type Message {
  id: ID!
  message: String!
  timestamp: String!
}

input CreateEventInput {
  eventName: String!
  description: String
  eventDate: String
  eventLocation: String
  imagePath: String
}

input UpdateEventInput {
  id: ID!
  eventName: String
  description: String
  eventDate: String
  eventLocation: String
  imagePath: String
}

input DeleteEventInput {
  id: ID!
}

input ReadEventInput {
  id: ID!
}

type Event {
  id: ID!
  eventName: String!
  description: String
  eventDate: String
  eventLocation: String
  createdTimestamp: String!
  playedTimestamp: String
  imagePath: String
}

type DeletionResult {
  deletedTimestamp: String!
}

union EventDeleteResult = Event | DeletionResult